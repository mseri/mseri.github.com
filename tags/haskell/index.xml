<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Haskell on A fractal spectrum of tales</title><link>https://www.mseri.me/tags/haskell/</link><description>Recent content in Haskell on A fractal spectrum of tales</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 21 Nov 2014 15:24:54 +0000</lastBuildDate><atom:link href="https://www.mseri.me/tags/haskell/index.xml" rel="self" type="application/rss+xml"/><item><title>Left pipe in Haskell</title><link>https://www.mseri.me/left-pipe-in-haskell/</link><pubDate>Fri, 21 Nov 2014 15:24:54 +0000</pubDate><guid>https://www.mseri.me/left-pipe-in-haskell/</guid><description>&lt;p>If you read this blog, you know that I am very biased by having worked with unix shells for almost two decades and that I am addicted to the use of pipes (see e.g. &lt;a href="https://www.mseri.me/piping-with-swift/">Piping with Swift&lt;/a>). I really find much more natural to see data moving from left to right.&lt;/p>
&lt;p>Yesterday I was thinking that in Haskell everything is an expression and that you can easily define infix operators. Thus it must be possible to implement a shell-like pipe.&lt;/p></description></item><item><title>Implementing Either type in Swift</title><link>https://www.mseri.me/implementing-either-type-in-swift/</link><pubDate>Wed, 04 Jun 2014 14:11:25 +0000</pubDate><guid>https://www.mseri.me/implementing-either-type-in-swift/</guid><description>&lt;p>It has been only a couple of days since Apple &lt;a href="https://developer.apple.com/swift/">announced and released Swift&lt;/a>. It has possibly been the most important and interesting announcement of Apple in the last few years and &lt;a href="https://news.ycombinator.com/item?id=7835099">started an amount of discussions around the web&lt;/a>.&lt;/p>
&lt;p>With the hours passing, we&amp;rsquo;ve found out that there was &lt;a href="https://swift-lang.org">at least another Swift&lt;/a> in the history of programming languages (with a similar icon) and that &lt;a href="https://nondot.org/sabre/">Swift is under development since 2010 and its father is Chris Lattner&lt;/a>, creator of &lt;code>clang&lt;/code> and &lt;code>LLVM&lt;/code>.&lt;/p></description></item><item><title>Move to ghc 7.8.2 on MacOSX</title><link>https://www.mseri.me/move-to-ghc-7-8-2-on-macosx/</link><pubDate>Sun, 01 Jun 2014 15:17:42 +0000</pubDate><guid>https://www.mseri.me/move-to-ghc-7-8-2-on-macosx/</guid><description>&lt;p>Lately I&amp;rsquo;ve been playing with some functional languages: &lt;a href="https://www.haskell.org/">haskell&lt;/a>, lisp (in particular the scheme dialect, see e.g. &lt;a href="https://www.call-cc.org">chicken&lt;/a> or &lt;a href="https://racket-lang.org">racket&lt;/a>) and &lt;a href="https://elixir-lang.org">elixir&lt;/a> (I very much like it and I really appreciate that it runs on the erlang VM).&lt;/p>
&lt;p>Each of those has something pretty unique and I believe is very worth learning. I cannot stress how much material you can find both online and in libraries to learn them (except for elixir but its website does a really good job and there will be plenty of books very soon out) and how strong thay can change your way of programming.&lt;/p></description></item></channel></rss>