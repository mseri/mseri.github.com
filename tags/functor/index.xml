<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functor on A fractal spectrum of tales</title><link>https://www.mseri.me/tags/functor/</link><description>Recent content in Functor on A fractal spectrum of tales</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 04 Jun 2017 22:00:54 +0000</lastBuildDate><atom:link href="https://www.mseri.me/tags/functor/index.xml" rel="self" type="application/rss+xml"/><item><title>First steps with Category Theory and OCaml</title><link>https://www.mseri.me/typeclass-ocaml/</link><pubDate>Sun, 04 Jun 2017 22:00:54 +0000</pubDate><guid>https://www.mseri.me/typeclass-ocaml/</guid><description>#&amp;nbsp;Introduction Category theory is an abstrac mathematical framework that had a huge influence on pure functional programming design patterns. The abstractions and laws that come bundled with the mathematical concepts allow us to write safer and composable interfaces, very prone to equational reasoning, at the price of a steeper learning curve. If you attempt to write some relatively modern Haskell code, you will inevitably have to deal with Monoids, Functions, Monads, Lenses and whatnot typeclassopedia.</description></item></channel></rss>